import os
import logging
import re
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram import F

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "8234719124:AAF1F24fR1fkdzrEaELm4Bnsyc0iFgvkxyE")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

# --- –°–ø–∏—Å–æ–∫ –º–∞—Ç–∞ ---
BAD_WORDS = [
    "–±–ª—è—Ç—å", "–±–ª—è", "–±–ª—è–¥—å", "–±–ª—è–¥", "—Å—É–∫–∞", "—Å—Å—É–∫–∞", "—Å—Ü—É–∫–∞", "—Å—É–∫–∏",
    "–ø–∏–∑–¥", "–ø–∏–∑–¥–µ", "–ø–∏–∑–¥–µ—Ü", "–ø–∏–∑–¥–∞", "–ø–∏–∑–¥—É–π", "–µ–±–∞—Ç—å", "–µ–±–∞–ª", "–µ–±–∞–Ω",
    "–µ–±–ª–æ", "–µ–±–ª—è", "—Ö—É–π", "—Ö—É—è", "—Ö—É–µ", "—Ö—É–µ–º", "—Ö—É–µ–≤", "—Ö—É–µ–≤—ã–π", "–µ–±–ª",
    "–ø–æ–µ–±", "–Ω–∞–µ–±", "—É–µ–±", "–ø—Ä–æ–µ–±", "–∑–∞–µ–±", "–æ—Ç–µ–±", "–≤—ä–µ–±", "–≤—ã–µ–±",
    "–¥–æ–ª–±–æ–µ–±", "–¥–æ–ª–±–∞–µ–±", "–µ–±–∞–Ω–∞—Ç", "–µ–±–∞–Ω—É—Ç—ã–π", "–º—É–¥–∞–∫", "–º—É–¥–∏–ª", "–º—É–¥–µ–Ω—å",
    "–º—É–¥–∞—á—å–µ", "–º—É–¥–∏–ª–∞", "—Ö–µ—Ä", "—Ö–µ—Ä–Ω", "—Ö–µ—Ä–æ–≤", "—Ö–µ—Ä–Ω—è", "–æ—Ö—É–µ", "–æ—Ö–µ—Ä–µ",
    "–æ—Ö—É–µ–Ω–Ω–æ", "–æ—Ö—É–µ—Ç—å", "–ø–∏–¥–∞—Ä", "–ø–∏–¥–æ—Ä", "–ø–∏–¥—Ä", "–ø–µ–¥–∏–∫", "–ø–µ–¥—Ä–∏–ª–∞",
    "–≥–∞–Ω–¥–æ–Ω", "–≥–∞–Ω–¥–æ—à–∏—Ç—å", "—à–ª—é—Ö", "—à–ª—é—Ö–∞", "—à–∞–ª–∞–≤–∞"
]

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–∞ ---
def check_bad_words(text: str) -> bool:
    text_lower = text.lower()
    text_clean = re.sub(r"\s+|[.*_\-]", "", text_lower)  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
    for word in BAD_WORDS:
        if word in text_clean or re.search(rf"\b{word}", text_lower):
            return True
    return False

# --- /start ---
@dp.message(CommandStart())
async def start(msg: Message):
    if msg.chat.type == ChatType.PRIVATE:
        await msg.answer("‚ùå –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    else:
        await msg.answer("‚úÖ –ê–Ω—Ç–∏–º–∞—Ç-–±–æ—Ç –≤–∫–ª—é—á—ë–Ω! üëÆ‚Äç‚ôÇÔ∏è")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}) & F.text)
async def detect_bad_words(msg: Message):
    if msg.from_user.is_bot or msg.text.startswith("/"):
        return

    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{msg.text}' –æ—Ç {msg.from_user.first_name}")

    if check_bad_words(msg.text):
        logging.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ç: '{msg.text}'")

        try:
            await msg.delete()
            warning = await msg.answer(
                f"‚ö†Ô∏è {msg.from_user.first_name}, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å!\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
            )

            await asyncio.sleep(5)
            try:
                await warning.delete()
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await msg.reply(
                "‚ö†Ô∏è –ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "1. –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "2. –ù–µ—Ç –ø—Ä–∞–≤–∞ '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π'\n"
                "3. Privacy Mode –≤–∫–ª—é—á—ë–Ω –≤ @BotFather"
            )

# --- –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def private_message(msg: Message):
    await msg.answer("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Bothost.ru!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
