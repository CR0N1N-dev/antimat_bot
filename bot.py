import os
import logging
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram import F

# üîë –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini ---
def check_bad_words(text):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{
            "parts": [{"text": f"–û–ø—Ä–µ–¥–µ–ª–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (–º–∞—Ç): '{text}'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."}]
        }]
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        result = response.json()
        output = result["candidates"][0]["content"]["parts"][0]["text"].lower()
        logging.info(f"Gemini –æ—Ç–≤–µ—Ç: {output}")
        return "–¥–∞" in output
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        return False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start(msg: Message):
    if msg.chat.type == ChatType.PRIVATE:
        await msg.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –≥—Ä—É–ø–ø—É!")
    else:
        await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º üëÄ")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ---
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def detect_bad_words(msg: Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if msg.from_user.is_bot:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not msg.text:
        return
    
    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}")
    
    if check_bad_words(msg.text):
        try:
            await bot.delete_message(msg.chat.id, msg.message_id)
            warning = await msg.answer(
                f"{msg.from_user.first_name}, —Ç—ã —Å–∫–∞–∑–∞–ª –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ! üò°\n"
                "–ù–µ –≥–æ–≤–æ—Ä–∏ –±–æ–ª—å—à–µ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø–ª–æ—Ö–æ."
            )
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            import asyncio
            await asyncio.sleep(10)
            await warning.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

# --- –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def private_message(msg: Message):
    await msg.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –≥—Ä—É–ø–ø—É!")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
