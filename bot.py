import os
import logging
import re
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram import F

# üîë –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ (–±–∞–∑–æ–≤—ã–π, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å) ---
BAD_WORDS = [
    "–±–ª—è—Ç—å", "–±–ª—è", "–±–ª—è–¥—å", "—Å—É–∫–∞", "–ø–∏–∑–¥", "–µ–±–∞—Ç—å", "–µ–±–∞–Ω", "—Ö—É–π", "—Ö—É–µ", "—Ö—É—è",
    "–µ–±–∞–ª", "–µ–±–ª", "–ø–æ–µ–±", "–Ω–∞–µ–±", "—É–µ–±", "–ø—Ä–æ–µ–±", "–∑–∞–µ–±", "–æ—Ç–µ–±", "–≤—ä–µ–±", "–≤—ã–µ–±",
    "–¥–æ–ª–±–æ–µ–±", "–º—É–¥–∞–∫", "–º—É–¥–∏–ª", "–º—É–¥–µ–Ω—å", "—Ö–µ—Ä", "—Ö–µ—Ä–Ω", "—Ö–µ—Ä–æ–≤", "–æ—Ö—É–µ", "–æ—Ö–µ—Ä–µ",
    "–ø–∏–¥–∞—Ä", "–ø–∏–¥–æ—Ä", "–ø–∏–¥—Ä", "–ø–µ–¥–∏–∫", "–≥–∞–Ω–¥–æ–Ω", "—à–ª—é—Ö", "–±–ª—è–¥", "—Å—Å—É–∫–∞", "—Å—Ü—É–∫–∞"
]

# --- –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–∞ (—Ä–µ–≥—É–ª—è—Ä–∫–∏) ---
def quick_check_bad_words(text):
    text_lower = text.lower()
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏ (–æ–±—Ö–æ–¥: "–± –ª —è —Ç —å")
    text_clean = re.sub(r'\s+', '', text_lower)
    
    for word in BAD_WORDS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞ –∏ —á–∞—Å—Ç–∏ —Å–ª–æ–≤
        if word in text_clean or re.search(rf'\b{word}', text_lower):
            return True
    return False

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Gemini (–µ—Å–ª–∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞) ---
def gemini_check_bad_words(text):
    if not GEMINI_API_KEY:
        return False
        
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
    
    prompt = f"""–ï—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ —Ä—É—Å—Å–∫–∏–π –º–∞—Ç –∏–ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞?
–¢–µ–∫—Å—Ç: "{text}"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û: –î–ê –∏–ª–∏ –ù–ï–¢"""

    data = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {"temperature": 0, "maxOutputTokens": 5}
    }

    try:
        response = requests.post(url, json=data, timeout=5)
        response.raise_for_status()
        result = response.json()
        output = result["candidates"][0]["content"]["parts"][0]["text"].strip().lower()
        return "–¥–∞" in output
    except Exception as e:
        logging.error(f"Gemini –æ—à–∏–±–∫–∞: {e}")
        return False

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
def check_bad_words(text):
    # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if quick_check_bad_words(text):
        return True
    # –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Gemini (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # return gemini_check_bad_words(text)
    return False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start(msg: Message):
    if msg.chat.type == ChatType.PRIVATE:
        await msg.answer("‚ùå –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    else:
        await msg.answer("‚úÖ –ê–Ω—Ç–∏–º–∞—Ç-–±–æ—Ç –≤–∫–ª—é—á—ë–Ω! üëÆ‚Äç‚ôÇÔ∏è")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ---
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}) & F.text)
async def detect_bad_words(msg: Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
    if msg.from_user.is_bot or msg.text.startswith("/"):
        return
    
    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è—é: '{msg.text}' –æ—Ç {msg.from_user.first_name}")
    
    if check_bad_words(msg.text):
        try:
            await msg.delete()
            logging.info(f"‚ùå –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º –æ—Ç {msg.from_user.first_name}")
            
            warning = await msg.answer(
                f"‚ö†Ô∏è {msg.from_user.first_name}, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å!\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
            )
            
            import asyncio
            await asyncio.sleep(5)
            try:
                await warning.delete()
            except:
                pass
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await msg.answer("‚ö†Ô∏è –ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–¥–µ–ª–∞–π –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")

# --- –õ–∏—á–∫–∞ ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def private_message(msg: Message):
    await msg.answer("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import asyncio
    logging.info("üöÄ –ê–Ω—Ç–∏–º–∞—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot))
