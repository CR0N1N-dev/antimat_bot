import logging
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram import F

# üîë –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –∫–ª—é—á–∏
load_dotenv()
GEMINI_API_KEY = "AIzaSyBHD3ls9mIPw2poqtaS4aNRJJfjs6j0Ico"

bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini API
def check_bad_words(text):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{
            "parts": [{"text": f"–û–ø—Ä–µ–¥–µ–ª–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (–º–∞—Ç): '{text}'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."}]
        }]
    }

    response = requests.post(url, headers=headers, json=data)
    result = response.json()

    try:
        output = result["candidates"][0]["content"]["parts"][0]["text"].lower()
        return "–¥–∞" in output
    except Exception:
        return False

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(msg: Message):
    if msg.chat.type == ChatType.PRIVATE:
        await msg.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –≥—Ä—É–ø–ø—É!")
    else:
        await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º üëÄ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def detect_bad_words(msg: Message):
    if msg.text:
        if check_bad_words(msg.text):
            try:
                await bot.delete_message(msg.chat.id, msg.message_id)
                await msg.answer(f"{msg.from_user.first_name}, —Ç—ã —Å–∫–∞–∑–∞–ª –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ! üò°\n–ù–µ –≥–æ–≤–æ—Ä–∏ –±–æ–ª—å—à–µ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø–ª–æ—Ö–æ.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", e)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫–µ
@dp.message(F.chat.type == ChatType.PRIVATE)
async def private_message(msg: Message):
    await msg.answer("–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –≥—Ä—É–ø–ø—É!")

# –ó–∞–ø—É—Å–∫
if name == "main":
    import asyncio
    asyncio.run(dp.start_polling(bot))