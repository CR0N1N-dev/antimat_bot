import os
import logging
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram import F

# üîë –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–∞ —á–µ—Ä–µ–∑ Gemini ---
def check_bad_words(text):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    
    prompt = f"""–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–∞, –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π.
–¢–µ–∫—Å—Ç: "{text}"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–ê –∏–ª–∏ –ù–ï–¢
–î–ê - –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç
–ù–ï–¢ - –µ—Å–ª–∏ –º–∞—Ç–∞ –Ω–µ—Ç"""

    data = {
        "contents": [{
            "parts": [{"text": prompt}]
        }],
        "generationConfig": {
            "temperature": 0.1,
            "maxOutputTokens": 10
        }
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        response.raise_for_status()
        result = response.json()
        
        output = result["candidates"][0]["content"]["parts"][0]["text"].strip().lower()
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ '{text[:50]}...' -> Gemini: {output}")
        
        return "–¥–∞" in output or "yes" in output
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        return False

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start(msg: Message):
    if msg.chat.type == ChatType.PRIVATE:
        await msg.answer("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
    else:
        await msg.answer("‚úÖ –ê–Ω—Ç–∏–º–∞—Ç-–±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º üëÆ")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ---
@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}) & F.text)
async def detect_bad_words(msg: Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
    if msg.from_user.is_bot or (msg.text and msg.text.startswith("/")):
        return
    
    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è—é: {msg.text}")
    
    if check_bad_words(msg.text):
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º
            await msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning = await msg.answer(
                f"‚ö†Ô∏è {msg.from_user.first_name}, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å!\n"
                f"–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            import asyncio
            await asyncio.sleep(5)
            try:
                await warning.delete()
            except:
                pass
                
        except Exception as e:
            logging.error(f"–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            logging.error("–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π!")

# --- –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def private_message(msg: Message):
    await msg.answer("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    import asyncio
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot))
